service: MaddiesWineCellar

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    TABLE_NAME: "Cellar"


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
# environment:
#   towelTopic: value

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

package:
  individually: true
  exclude:
    - ./**


functions:
  getWines:
    handler: GetWines/handler.GetWines
    description: service to get wines from cellar
    events:
      - http:
          path: wines
          method: get

    package:
      include:
        - GetWines/handler.js
        - Shared/Models/wineModel.js
        - node_modules/aws-sdk/**
        - node_modules/buffer/**
        - node_modules/base64-js/**
        - node_modules/ieee754/**
        - node_modules/isarray/**
        - node_modules/crypto-browserify/**
        - node_modules/jmespath/**
        - node_modules/querystring/**
        - node_modules/sax/**
        - node_modules/url/**
        - node_modules/punycode/**
        - node_modules/uuid/**
        - node_modules/xml2js/**
        - node_modules/lodash/**
        - node_modules/xmlbuilder/**
        - node_modules/buffer/**

  getWine:
    handler: GetWine/handler.GetWine
    description: service to get a specific wine from cellar
    events:
      - http:
          path: wine
          method: get

    package:
      include:
        - GetWine/handler.js
        - Shared/Models/wineModel.js
        - node_modules/aws-sdk/**
        - node_modules/buffer/**
        - node_modules/base64-js/**
        - node_modules/ieee754/**
        - node_modules/isarray/**
        - node_modules/crypto-browserify/**
        - node_modules/jmespath/**
        - node_modules/querystring/**
        - node_modules/sax/**
        - node_modules/url/**
        - node_modules/punycode/**
        - node_modules/uuid/**
        - node_modules/xml2js/**
        - node_modules/lodash/**
        - node_modules/xmlbuilder/**
        - node_modules/buffer/**

  deleteWine:
    handler: DeleteWine/handler.DeleteWine
    description: service to delete wines from cellar
    events:
      - http:
          path: wine
          method: delete

    package:
      include:
        - DeleteWine/handler.js
        - Shared/Models/wineModel.js
        - node_modules/aws-sdk/**
        - node_modules/buffer/**
        - node_modules/base64-js/**
        - node_modules/ieee754/**
        - node_modules/isarray/**
        - node_modules/crypto-browserify/**
        - node_modules/jmespath/**
        - node_modules/querystring/**
        - node_modules/sax/**
        - node_modules/url/**
        - node_modules/punycode/**
        - node_modules/uuid/**
        - node_modules/xml2js/**
        - node_modules/lodash/**
        - node_modules/xmlbuilder/**
        - node_modules/buffer/**

  updateWine:
    handler: UpdateWine/handler.UpdateWine
    description: service to get wines from cellar
    events:
      - http:
          path: wine
          method: put

    package:
      include:
        - UpdateWine/handler.js
        - Shared/Models/wineModel.js
        - node_modules/aws-sdk/**
        - node_modules/buffer/**
        - node_modules/base64-js/**
        - node_modules/ieee754/**
        - node_modules/isarray/**
        - node_modules/crypto-browserify/**
        - node_modules/jmespath/**
        - node_modules/querystring/**
        - node_modules/sax/**
        - node_modules/url/**
        - node_modules/punycode/**
        - node_modules/uuid/**
        - node_modules/xml2js/**
        - node_modules/lodash/**
        - node_modules/xmlbuilder/**
        - node_modules/buffer/**

  addWine:
    handler: AddWine/handler.AddWine
    description: service to get wines from cellar
    events:
      - http:
          path: wine
          method: post

    package:
      include:
        - AddWine/handler.js
        - Shared/Models/wineModel.js
        - node_modules/aws-sdk/**
        - node_modules/buffer/**
        - node_modules/base64-js/**
        - node_modules/ieee754/**
        - node_modules/isarray/**
        - node_modules/crypto-browserify/**
        - node_modules/jmespath/**
        - node_modules/querystring/**
        - node_modules/sax/**
        - node_modules/url/**
        - node_modules/punycode/**
        - node_modules/uuid/**
        - node_modules/xml2js/**
        - node_modules/lodash/**
        - node_modules/xmlbuilder/**
        - node_modules/buffer/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
